<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://miuyou.github.io/</id>
    <title>春待ち</title>
    <updated>2020-03-05T09:01:30.489Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://miuyou.github.io/"/>
    <link rel="self" href="https://miuyou.github.io/atom.xml"/>
    <subtitle>开端顺利 自这天起 离乡背井 等候春息  身处何地 等候春息</subtitle>
    <logo>https://miuyou.github.io/images/avatar.png</logo>
    <icon>https://miuyou.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 春待ち</rights>
    <entry>
        <title type="html"><![CDATA[[HEOI2016/TJOI2016]排序 题解]]></title>
        <id>https://miuyou.github.io/post/heoi2016tjoi2016pai-xu-ti-jie/</id>
        <link href="https://miuyou.github.io/post/heoi2016tjoi2016pai-xu-ti-jie/">
        </link>
        <updated>2020-03-05T06:50:33.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://miuyou.github.io//post-images/1583391593712.jpg" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://miuyou.github.io//post-images/1583391593712.jpg" alt="" loading="lazy"></figure>
<!-- more -->
<p>题目要求我们求出第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>位置上的数字.<br>
暴力想法:暴力局域排序,每次排序的复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span><br>
不合格,舍弃暴力,发现排序不可避免,那么考虑如何优化排序复杂度<br>
考虑<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>01</mn></mrow><annotation encoding="application/x-tex">01</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">1</span></span></span></span>串可以做到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">logn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span>排序(如何排序自行思考)<br>
那么考虑如何转换成一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>01</mn></mrow><annotation encoding="application/x-tex">01</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">1</span></span></span></span>串<br>
约定比选择的数大的为1,小的为0<br>
但题目要求固定位置的数字,则选择的数不确定<br>
发现题目给出序列的为排列,则可二分所选择的数<br>
求出结果</p>
<p>logn排序的原理是<br>
因为序列全01,那么从小到大就是将所有的0放到前面,所有的1放到后面</p>
<p>时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlogn^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
using namespace std;
#define mid ((l+r)&gt;&gt;1)
#define ls (k&lt;&lt;1)
#define rs (k&lt;&lt;1|1)
#define lson ls,l,mid
#define rson rs,mid+1,r
int n,m,q,a[100050];
struct edge{
	int a,b,c;
}tu[100050];
struct node{
	int flag,sum;
}t[400050];
inline void pushdown(int k,int l,int r){
	if(t[k].flag==1){
		t[ls].flag=t[rs].flag=1;
		t[ls].sum=t[rs].sum=0;
	}else if(t[k].flag==2){
		t[ls].flag=t[rs].flag=2;
		t[ls].sum=(mid-l+1);t[rs].sum=(r-mid);
	}t[k].flag=0;
}
inline void built(int k,int l,int r,int x) {
	t[k].flag=0;
	if(l==r) {
		t[k].sum=(a[l]&gt;=x);
	} else {
		built(lson,x);
		built(rson,x);
        t[k].sum=t[ls].sum+t[rs].sum;
	}
}
inline int query(int k,int l,int r,int L,int R) {
	if(l&gt;r||r&lt;L||l&gt;R)return 0;
	if(L&lt;=l&amp;&amp;r&lt;=R)return t[k].sum;
    int tot=0;
	pushdown(k,l,r);
	if(L&lt;=mid)tot+=query(lson,L,R);
	if(mid&lt;R)tot+=query(rson,L,R);
	t[k].sum=t[ls].sum+t[rs].sum;
	return tot;
}
inline void gai(int k,int l,int r,int L,int R,int val){
	if(l&gt;r||r&lt;L||l&gt;R)return;
    if(L&lt;=l&amp;&amp;r&lt;=R){
        t[k].flag=val+1;
		t[k].sum=(r-l+1)*val;
    }else{
        pushdown(k,l,r);
		if(mid&gt;=L)gai(lson,L,R,val);
		if(mid&lt;R)gai(rson,L,R,val);
		t[k].sum=t[ls].sum+t[rs].sum;
    }
}
inline int cha(int k,int l,int r,int val){
	if(l&gt;r||r&lt;val||l&gt;val)return 0;
    if(l==val&amp;&amp;r==val){
        return t[k].sum;
    }else{
        pushdown(k,l,r);
		if(mid&gt;=val)return cha(lson,val);
		else return cha(rson,val);
    }
}
int check(int x){
	built(1,1,n,x);
	for(int i=1;i&lt;=m;++i){
        int val=query(1,1,n,tu[i].b,tu[i].c);
        if(!val)gai(1,1,n,tu[i].b,tu[i].c,0);
		if(tu[i].a){
			gai(1,1,n,tu[i].b,tu[i].b+val-1,1);
			gai(1,1,n,tu[i].b+val,tu[i].c,0);
		}else{
			val=(tu[i].c-tu[i].b+1)-val;
			gai(1,1,n,tu[i].b,tu[i].b+val-1,0);
			gai(1,1,n,tu[i].b+val,tu[i].c,1);
		}
	}
	return cha(1,1,n,q);
}
int main(){
	cin&gt;&gt;n&gt;&gt;m;
	for(int i=1;i&lt;=n;++i)scanf(&quot;%d&quot;,&amp;a[i]);
	for(int i=1;i&lt;=m;++i){
		scanf(&quot;%d%d%d&quot;,&amp;tu[i].a,&amp;tu[i].b,&amp;tu[i].c);
	}int l=1,r=n,md,anse=0;cin&gt;&gt;q;
	while(l&lt;=r){
		md=(l+r)&gt;&gt;1;
		if(check(md)){
			anse=md;
			l=md+1;
		}else r=md-1;
	}cout&lt;&lt;anse&lt;&lt;endl;return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Miu_you の 网络流]]></title>
        <id>https://miuyou.github.io/post/miu_you-no-wang-luo-liu/</id>
        <link href="https://miuyou.github.io/post/miu_you-no-wang-luo-liu/">
        </link>
        <updated>2020-03-04T04:01:12.000Z</updated>
        <summary type="html"><![CDATA[<p>这里就是放放可爱の网络流的题目和感想啦~~~~~~~<br>
<img src="https://miuyou.github.io//post-images/1583297071335.jpg" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<p>这里就是放放可爱の网络流的题目和感想啦~~~~~~~<br>
<img src="https://miuyou.github.io//post-images/1583297071335.jpg" alt="" loading="lazy"></p>
<h2 id="-more-算法分析"><!-- more --><br>
算法分析</h2>
<p>咕了</p>
<h2 id="建模技巧">建模技巧</h2>
<p>1.大汇点大源点<br>
这个东西大家都会吧,可以简化题目,若有多个入点或者出点可以给他们连在一起</p>
<p>2.拆点<br>
如果对于点本身有限制,就应当拆点,例如要求路径不相交,可以在点本身连一条边,限制流量</p>
<p>3.求最小割<br>
最小割==最大流</p>
<h2 id="可爱の网络流们">可爱の网络流们</h2>
<p>有趣の题</p>
<ul>
<li>
<p><a href="https://www.luogu.com.cn/problem/P1251">P1251 餐巾计划问题</a><br>
有趣的题,依旧是比较难想.考虑每天要用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>块干净餐巾,为了满足要求,那么最大流一定是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mo>(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">\sum(a_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,同时这题有着许多限制果断拆点,分为白天和晚上,白天向ed连<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>做出边,但是为了获得旧餐巾从st连向夜晚一条<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,费用都为0,然后st向白天连一条,每个晚上能洗的方式都连一条到结束时的白天久做完啦!</p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2055">P2055 [ZJOI2009]假期的宿舍</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2754">P2754 [CTSC1999]家园 / 星际转移问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2756">P2756 飞行员配对方案问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2762">P2762 太空飞行计划问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2763">P2763 试题库问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2764">P2764 最小路径覆盖问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2765">P2765 魔术球问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2766">P2766 最长不下降子序列问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2770">P2770 航空路线问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2774">P2774 方格取数问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P4009">P4009 汽车加油行驶问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P4016">P4016 负载平衡问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P3358">P3358 最长k可重区间集问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P3357">P3357 最长k可重线段集问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P3356">P3356 火星探险问题 </a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P3355">P3355 骑士共存问题</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P3254">P3254 圆桌问题</a></p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P3980">P3980 [NOI2008]志愿者招募</a></li>
</ul>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2050">P2050 [NOI2012]美食节</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2604">P2604 [ZJOI2010]网络扩容</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P3159">P3159 [CQOI2012]交换棋子</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2153">P2153 [SDOI2009]晨跑</a></p>
<p>重复/相似的练手题</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2053">P2053 [SCOI2007]修车</a><br>
美食节的弱化题....</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[                            省选补题计划]]></title>
        <id>https://miuyou.github.io/post/sheng-xuan-bu-ti-ji-hua-qwq/</id>
        <link href="https://miuyou.github.io/post/sheng-xuan-bu-ti-ji-hua-qwq/">
        </link>
        <updated>2020-03-03T09:27:41.000Z</updated>
        <summary type="html"><![CDATA[<p>因为窝太弱了,所以决定把省选题都刷了!<br>
<img src="https://miuyou.github.io//post-images/1583297086560.jpg" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<p>因为窝太弱了,所以决定把省选题都刷了!<br>
<img src="https://miuyou.github.io//post-images/1583297086560.jpg" alt="" loading="lazy"></p>
<h2 id="-more-"><!-- more --></h2>
<h2 id="qwq">qwq</h2>
<h2 id="加油">加油!</h2>
<h2 id="哪怕稍微不那么弱也好啊qwq">哪怕稍微不那么弱也好啊qwq</h2>
<h2 id="下面就是写过的题啦qwq">下面就是写过的题啦qwq</h2>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1110">P1110 [ZJOI2007]报表统计</a><br>
(完成)使用mulbiset过平衡树太棒啦(๑•̀ㅂ•́)و✧</li>
<li><a href="https://www.luogu.com.cn/problem/P1128">P1128 [HNOI2001]求正整数</a></li>
</ul>
<p>因为做过反素数,所以知道一个数字的因子个数该怎么算,而这题要求这个的逆运算,因为之前是搜索然后筛选,这次要逆向的话似乎也可以搜索,但数据范围不允许这种玄学算法通过,可以考虑dp,似乎是n方的,因为数字过大所以要转化转移方程,因为涉及到a的b次方,可以取对数优化</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1129">P1129 [ZJOI2007]矩阵游戏</a></li>
</ul>
<p>转换一下模型,可以发现是行对列匹配,转换成最大流解决</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1131">P1131 [ZJOI2007]时态同步</a><br>
简单的树形<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">dp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span></span></span></span></li>
<li><a href="https://www.luogu.com.cn/problem/P1169">P1169 [ZJOI2007]棋盘制作</a><br>
正方形悬线模板秒了,长方形要改一下,考虑从上向下转移,左右同时维护</li>
<li><a href="https://www.luogu.com.cn/problem/P1197">P1197 [JSOI2008]星球大战</a><br>
正难则反</li>
<li><a href="https://www.luogu.com.cn/problem/P1198">P1198 [JSOI2008]最大数</a><br>
动态开点线段树</li>
<li><a href="https://www.luogu.com.cn/problem/P1291">P1291 [SHOI2002]百事世界杯之旅</a><br>
概率期望入门</li>
</ul>
<ul>
<li>
<ul>
<li>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1295">P1295 [TJOI2011]书架</a><br>
非常有趣的单调队列+双端队列优化dp,论如何动态维护最大值,O(1)</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1337">P1337 [JSOI2004]平衡点 / 吊打XXX</a><br>
模拟退火,自创多种随机化(单种过不了</li>
<li><a href="https://www.luogu.com.cn/problem/P1377">P1377 [TJOI2011]树的序</a><br>
欸,思维题</li>
<li><a href="https://www.luogu.com.cn/problem/P1418">P1418 [TJOI2011]构造矩阵</a><br>
网络流有趣的题目</li>
<li><a href="https://www.luogu.com.cn/problem/P1434">P1434 [SHOI2002]滑雪</a><br>
入门水题,注意边界</li>
<li><a href="https://www.luogu.com.cn/problem/P1437">P1437 [HNOI2004]敲砖块</a><br>
还不错的dp,写写写就对了,考虑合理运用边界来进行跳跃式转移</li>
<li><a href="https://www.luogu.com.cn/problem/P1446">P1446 [HNOI2008]Cards</a></li>
<li><a href="https://www.luogu.com.cn/problem/P1450">P1450 [HAOI2008]硬币购物</a><br>
憨批榕树原理dp</li>
<li><a href="https://www.luogu.com.cn/problem/P1463">P1463 [POI2002][HAOI2007]反素数</a><br>
挺不错的搜索</li>
<li><a href="https://www.luogu.com.cn/problem/P1627">P1627 [CQOI2009]中位数</a><br>
弱智题,开个桶记录一下就好了</li>
<li><a href="https://www.luogu.com.cn/problem/P1640">P1640 [SCOI2010]连续攻击游戏</a><br>
比较有趣的并查集</li>
<li><a href="https://www.luogu.com.cn/problem/P1641">P1641 [SCOI2010]生成字符串</a><br>
组合计数基础</li>
<li><a href="https://www.luogu.com.cn/problem/P1772">P1772 [ZJOI2006]物流运输</a><br>
dp+最短路</li>
<li><a href="https://www.luogu.com.cn/problem/P1841">P1841 [JSOI2007]重要的城市</a><br>
dij做n遍,在最短路中若一条最短边是唯一的则起点为重要城市</li>
<li><a href="https://www.luogu.com.cn/problem/P1896">P1896 [SCOI2005]互不侵犯</a><br>
设dp状态为第i行放了第j种方式总共z个,谔谔</li>
<li><a href="https://www.luogu.com.cn/problem/P1972">P1972 [SDOI2009]HH的项链</a><br>
树状数组离线搞,主席树在线</li>
<li><a href="https://www.luogu.com.cn/problem/P2023">P2023 [AHOI2009]维护序列</a><br>
弱智低能题,就是一个模板(</li>
<li><a href="https://www.luogu.com.cn/problem/P2039">P2039 [AHOI2009]跳棋</a><br>
谔谔dp,谁知道讷</li>
</ul>
<ul>
<li>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2051">P2051 [AHOI2009]中国象棋</a><br>
神仙dp题</li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2053">P2053 [SCOI2007]修车</a><br>
普通的费用流</li>
</ul>
]]></content>
    </entry>
</feed>